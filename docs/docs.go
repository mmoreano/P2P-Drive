// Package docs GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag
package models

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "Dominickadiaz@hotmail.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/UserRegister": {
            "post": {
                "description": "Add Account to Database with JSON Body",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "accounts"
                ],
                "summary": "Add Account to Database with JSON Body",
                "parameters": [
                    {
                        "description": "User Register JSON Body",
                        "name": "RegisterRequest Model",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.RegisterRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.RegisterResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httputil.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/httputil.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httputil.HTTPError"
                        }
                    }
                }
            }
        },
	"/UserLogin?{Username}&{Password}": {
            "get": {
                "description": "User Login with Token as Response",
                "consumes": [
                    "application/json",
					"application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "accounts"
                ],
                "summary": "User Login with Token as Response",
                "parameters": [
                       {
                        "type": "string",
                        "description": "Users Username",
                        "name": "Username",
                        "in": "Params",
                        "required": true
                    },
					{
                        "type": "string",
                        "description": "Users Password",
                        "name": "Password",
                        "in": "Params",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.LoginResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httputil.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/httputil.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httputil.HTTPError"
                        }
                    }
                }
            }
        },
        "/userFiles?{Token}": {
            "get": {
                "description": "Get all Users Files with Token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "file"
                ],
                "summary": "Get all Users Files with Token",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Account Token",
                        "name": "Token",
                        "in": "Params",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.AddResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httputil.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/httputil.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httputil.HTTPError"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete file with Token and FileID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "file"
                ],
                "summary": "NOT FINISHED",
                "parameters": [
                    {
                        "type": "integer",
                        "format": "int64",
                        "description": "Account ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content",
                        "schema": {
                            "$ref": "#/definitions/model.Account"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httputil.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/httputil.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httputil.HTTPError"
                        }
                    }
                }
            },
        },
        "/fileAdd": {
            "post": {
                "description": "Add File to Database",
                "consumes": [
					"application/x-www-form-urlencoded",
					"application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "file"
                ],
                "summary": "Add File to Database",
				"parameters": [
                    {
                        "type": "Any File Type",
                        "description": "File to Upload",
                        "name": "File",
                        "in": "path",
                        "required": true
                    },
					{
						"type": "string",
						"description": "File Owner Token",
						"name ": "Token",
						"in": "query params",
						"required": true
					}
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.AddResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httputil.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/httputil.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/httputil.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httputil.HTTPError"
                        }
                    }
                }
            }
        },
		"/Peers": {
            "post": {
                "description": "Check Number of Peers",
                "consumes": [
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Status"
                ],
                "summary": "Check Number of Peers",
				"parameters": [
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.PeersResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httputil.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/httputil.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/httputil.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httputil.HTTPError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "httputil.HTTPError": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 400
                },
                "message": {
                    "type": "string",
                    "example": "status bad request"
                }
            }
        },
        "model.RegisterRequest": {
            "type": "object",
            "properties": {
                "Username": {
                    "type": "string",
                    "example": "username"
                },
                "UserPassword": {
                    "type": "string",
                    "example": "password"
                },
                "Number": {
                    "type": "string",
                    "example": "3051234321"
                },
				"Email": {
                    "type": "string",
                    "example": "test@example.com"
                },
				"FirstName": {
                    "type": "string",
                    "example": "John"
                },
				"LastName": {
                    "type": "string",
                    "example": "Doe"
                }
            }
        },
		"model.RegisterResponse": {
            "type": "object",
            "properties": {
                "Status": {
                    "type": "string",
                    "example": "Uploaded Successfully"
                }
            }
        },
		"model.LoginResponse": {
            "type": "object",
            "properties": {
                "Status": {
                    "Token": "string",
                    "example": "Users UUID Token"
                }
            }
        },
		"model.UserFileResponse": {
            "type": "object",
            "properties": {
                "Status": {
                    "type": "Files[]",
                    "example": "  
						Hash  :  QmWq8NAgs8r8dTL2TweyacauF9wuUdHjDh9SuwrK5VpYdL
						Name  :  Test.pdf
						Size  :  1394 
						Link  :  https://ipfs.io/ipfs/QmWq8NAgs8r8dTL2TweyacauF9wuUdHjDh9SuwrK5VpYde 
						Owner :  0x5b38Da
					"
                }
            }
        },
		"model.PeersResponse": {
					"type": "object",
					"properties": {
						"Peers": {
							"type": "Int",
							"example": "230"
						}
					}
				},
		"model.AddResponse": {
					"type": "object",
					"properties": {
						"Hash": {
							"type": "string",
							"example": "QmW2WQi7j6c7UgJTarActp7tDNikE4B2qXtFCfLPdsgaTQ"
						},
						"Name": {
							"type": "string",
							"example": "File Name"
						},
						"Size": {
							"type": "string",
							"example": "file size in bytes"
						},
						"Link": {
							"type": "string",
							"example": "IPFS Link to File"
						},
						"Owner": {
							"type": "string",
							"example": "Owner Email or ID"
						},
					}
				},
    },

    "securityDefinitions": {
        "ApiKeyAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        },
        "BasicAuth": {
            "type": "basic"
        },
        "OAuth2AccessCode": {
            "type": "oauth2",
            "flow": "accessCode",
            "authorizationUrl": "https://example.com/oauth/authorize",
            "tokenUrl": "https://example.com/oauth/token",
            "scopes": {
                "admin": "                            Grants read and write access to administrative information"
            }
        },
        "OAuth2Application": {
            "type": "oauth2",
            "flow": "application",
            "tokenUrl": "https://example.com/oauth/token",
            "scopes": {
                "admin": "                             Grants read and write access to administrative information",
                "write": "                             Grants write access"
            }
        },
        "OAuth2Implicit": {
            "type": "oauth2",
            "flow": "implicit",
            "authorizationUrl": "https://example.com/oauth/authorize",
            "scopes": {
                "admin": "                          Grants read and write access to administrative information",
                "write": "                          Grants write access"
            }
        },
        "OAuth2Password": {
            "type": "oauth2",
            "flow": "password",
            "tokenUrl": "https://example.com/oauth/token",
            "scopes": {
                "admin": "                          Grants read and write access to administrative information",
                "read": "                           Grants read access",
                "write": "                          Grants write access"
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:  "0.1",
	Host:     "localhost:8083",
	BasePath: "/",
	Schemes:  []string{},
	Title:    "IPFS API Documentation",
	Description: "Here you will find detailed documentation on the different endpoints, parameters and responses you should expect. Still a work" +
		"in progress so disregard the test tags",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
